<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Easy.Tall.UserCenter.WebApi</name>
    </assembly>
    <members>
        <member name="T:Easy.Tall.UserCenter.WebApi.Attribute.ApiExceptionFilterAttribute">
            <summary>
            异常过滤器
            </summary>
        </member>
        <member name="F:Easy.Tall.UserCenter.WebApi.Attribute.ApiExceptionFilterAttribute._logger">
            <summary>
            日志
            </summary>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Attribute.ApiExceptionFilterAttribute.#ctor(Microsoft.Extensions.Logging.ILogger{Easy.Tall.UserCenter.WebApi.Attribute.ApiExceptionFilterAttribute})">
            <summary>
            构造函数
            </summary>
            <param name="logger">日志</param>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Attribute.ApiExceptionFilterAttribute.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            重写异常
            </summary>
            <param name="context">异常内容</param>
        </member>
        <member name="T:Easy.Tall.UserCenter.WebApi.Attribute.PermissionAttribute">
            <summary>
            权限
            </summary>
        </member>
        <member name="T:Easy.Tall.UserCenter.WebApi.Attribute.ValidateModelAttribute">
            <summary>
            注册验证过滤器
            </summary>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Attribute.ValidateModelAttribute.OnActionExecuting(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext)">
            <summary>
            重写验证
            </summary>
            <param name="context">当前上下文</param>
        </member>
        <member name="T:Easy.Tall.UserCenter.WebApi.Controllers.AuthController">
            <summary>
            需要授权访问
            </summary>
        </member>
        <member name="T:Easy.Tall.UserCenter.WebApi.Controllers.ClassifyController">
            <summary>
            分类控制器
            </summary>
        </member>
        <member name="F:Easy.Tall.UserCenter.WebApi.Controllers.ClassifyController._classifyService">
            <summary>
            分类服务
            </summary>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Controllers.ClassifyController.#ctor(Easy.Tall.UserCenter.IServices.IClassifyService)">
            <summary>
            构造函数
            </summary>
            <param name="classifyService">分类服务</param>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Controllers.ClassifyController.Add(Easy.Tall.UserCenter.Entity.Extend.ClassifyAddRequest)">
            <summary>
            添加分类
            </summary>
            <param name="classifyAddRequest">分类信息</param>
            <returns>结果</returns>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Controllers.ClassifyController.Remove(System.String)">
            <summary>
            根据主键Id修改分类
            </summary>
            <param name="id">id</param>
            <returns>结果</returns>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Controllers.ClassifyController.Update(Easy.Tall.UserCenter.Entity.Extend.ClassifyUpdateRequest)">
            <summary>
            修改分类
            </summary>
            <param name="classifyUpdateRequest">分类信息</param>
            <returns>结果</returns>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Controllers.ClassifyController.GetPagination(Easy.Tall.UserCenter.Entity.Extend.ClassifyFilter)">
            <summary>
            分类分页
            </summary>
            <param name="classifyFilter">查询条件</param>
            <returns>数据</returns>
        </member>
        <member name="T:Easy.Tall.UserCenter.WebApi.Controllers.FormatDataControllerBase">
            <inheritdoc />
            <summary>
            控制基础类
            </summary>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Controllers.FormatDataControllerBase.Ok``1(``0)">
            <summary>
            Ok
            </summary>
            <param name="value">value</param>
            <returns>OkObjectResult</returns>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Controllers.FormatDataControllerBase.Ok(System.Int32,System.String)">
            <summary>
            Ok
            </summary>
            <param name="code">code</param>
            <param name="value">value</param>
            <returns>OkObjectResult</returns>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Controllers.FormatDataControllerBase.BadRequest(System.Int32,System.String)">
            <summary>
            BadRequest
            </summary>
            <param name="code">code</param>
            <param name="msg">msg</param>
            <returns>BadRequestObjectResult</returns>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Controllers.FormatDataControllerBase.NotFound(System.Int32,System.String)">
            <summary>
            NotFound
            </summary>
            <param name="code">code</param>
            <param name="msg">msg</param>
            <returns>NotFoundObjectResult</returns>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Controllers.FormatDataControllerBase.ServerException(System.Int32,System.String)">
            <summary>
            ServerException
            </summary>
            <param name="code">code</param>
            <param name="msg">msg</param>
            <returns>ObjectResult</returns>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Controllers.FormatDataControllerBase.UnProcessableEntity(System.Int32,System.String)">
            <summary>
            UnProcessableEntity
            </summary>
            <param name="code">code</param>
            <param name="msg">msg</param>
            <returns>UnProcessableEntityObjectResult</returns>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Controllers.FormatDataControllerBase.Conflict(System.Int32,System.String)">
            <summary>
            Conflict
            </summary>
            <param name="code">code</param>
            <param name="msg">msg</param>
            <returns>ConflictObjectResult</returns>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Controllers.FormatDataControllerBase.CreateResult``1(System.Int32,``0)">
            <summary>
            CreateAPIResult
            </summary>
            <typeparam name="T">T</typeparam>
            <param name="code">code</param>
            <param name="value">value</param>
            <returns>APIResult</returns>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Controllers.FormatDataControllerBase.CreateErrorResult``1(System.Int32,System.String)">
            <summary>
            CreateErrorResult
            </summary>
            <param name="code">code</param>
            <param name="msg">msg</param>
            <returns>APIResult</returns>
        </member>
        <member name="T:Easy.Tall.UserCenter.WebApi.Controllers.LoginController">
            <summary>
            用户登录
            </summary>
        </member>
        <member name="F:Easy.Tall.UserCenter.WebApi.Controllers.LoginController._jwtTokenValidator">
            <summary>
            JwtToken
            </summary>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Controllers.LoginController.#ctor(Easy.Tall.UserCenter.WebApi.Extensions.JwtTokenValidator)">
            <summary>
            构造函数
            </summary>
            <param name="jwtTokenValidator">jwtTokenValidator</param>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Controllers.LoginController.Login(Easy.Tall.UserCenter.Entity.Extend.UserLoginRequest)">
            <summary>
            用户登录测试
            </summary>
            <returns>返回token</returns>
        </member>
        <member name="T:Easy.Tall.UserCenter.WebApi.Controllers.UnAuthController">
            <summary>
            无需授权
            </summary>
        </member>
        <member name="T:Easy.Tall.UserCenter.WebApi.Controllers.ValuesController">
            <summary>
            val
            </summary>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Controllers.ValuesController.#ctor(Easy.Tall.UserCenter.IServices.IUserService,CSRedis.CSRedisClient,Microsoft.Extensions.Logging.ILogger{Easy.Tall.UserCenter.WebApi.Controllers.ValuesController})">
            <summary>
            ValuesController
            </summary>
            <param name="userServices">userServices</param>
            <param name="redisClient">redisClient</param>
            <param name="logger">logger</param>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Controllers.ValuesController.Get">
            <summary>
            GET api/values
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Controllers.ValuesController.Get(System.Int32)">
            <summary>
            GET api/values/5
            </summary>
            <param name="id">id</param>
            <returns>string</returns>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Controllers.ValuesController.Post(System.String)">
            <summary>
            POST api/values
            </summary>
            <param name="value">string</param>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Controllers.ValuesController.Put(System.Int32,System.String)">
            <summary>
            PUT api/values/5
            </summary>
            <param name="id">id</param>
            <param name="value">value</param>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Controllers.ValuesController.Delete(System.Int32)">
            <summary>
            DELETE api/values/5
            </summary>
            <param name="id">id</param>
        </member>
        <member name="T:Easy.Tall.UserCenter.WebApi.Extensions.ApiIocExtension">
            <summary>
            Api容器扩展
            </summary>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Extensions.ApiIocExtension.AddMvcBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加MVC服务
            </summary>
            <param name="services">容器</param>
            <returns>容器接口</returns>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Extensions.ApiIocExtension.AddApiBehaviorOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加无效的模型状态响应工厂
            </summary>
            <param name="services">容器</param>
            <returns>容器接口</returns>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Extensions.ApiIocExtension.AddContexts(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加HttpContext
            </summary>
            <param name="services">容器</param>
            <returns>容器接口</returns>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Extensions.ApiIocExtension.AddSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            添加Swagger
            </summary>
            <param name="services">容器</param>
            <param name="configuration">配置文件</param>
            <returns>容器接口</returns>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Extensions.ApiIocExtension.AddJwtAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            注册身份证验证
            </summary>
            <param name="services">容器</param>
            <param name="configuration">配置文件</param>
            <returns>容器接口</returns>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Extensions.ApiIocExtension.UseApplicationExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            全局异常处理
            </summary>
            <param name="app">app</param>
            <returns>app</returns>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Extensions.ApiIocExtension.AddRedisCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            添加RedisCache缓存
            </summary>
            <param name="services">容器</param>
            <param name="configuration">配置文件</param>
            <returns>容器接口</returns>
        </member>
        <member name="T:Easy.Tall.UserCenter.WebApi.Extensions.JwtTokenValidator">
            <summary>
            JwtToken
            </summary>
        </member>
        <member name="F:Easy.Tall.UserCenter.WebApi.Extensions.JwtTokenValidator._ssoOptions">
            <summary>
            配置信息
            </summary>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Extensions.JwtTokenValidator.#ctor(Microsoft.Extensions.Options.IOptions{Easy.Tall.UserCenter.Entity.Extend.Options.SsoOptions})">
            <summary>
            构造函数
            </summary>
            <param name="ssoOptions">配置信息</param>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Extensions.JwtTokenValidator.CanReadToken(System.String)">
            <summary>
            Returns true if the token can be read, false otherwise.
            </summary>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Extensions.JwtTokenValidator.ValidateToken(System.String,Microsoft.IdentityModel.Tokens.TokenValidationParameters,Microsoft.IdentityModel.Tokens.SecurityToken@)">
            <summary>
            Validates a token passed as a string using <see cref="T:Microsoft.IdentityModel.Tokens.TokenValidationParameters" />
            </summary>
        </member>
        <member name="P:Easy.Tall.UserCenter.WebApi.Extensions.JwtTokenValidator.CanValidateToken">
            <summary>
            如果可以验证令牌，则返回true
            </summary>
        </member>
        <member name="P:Easy.Tall.UserCenter.WebApi.Extensions.JwtTokenValidator.MaximumTokenSizeInBytes">
            <summary>
            获取并设置将处理的最大大小(以字节为单位)
            </summary>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Extensions.JwtTokenValidator.GenerateToken(System.String)">
            <summary>
            创建Token
            </summary>
            <param name="userId">userId</param>
            <returns>string</returns>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Extensions.JwtTokenValidator.ValidateToken(System.String,Microsoft.IdentityModel.Tokens.SecurityToken@)">
            <summary>
            验证token
            </summary>
            <param name="token">token</param>
            <param name="securityToken">securityToken</param>
            <returns>ClaimsPrincipal</returns>
        </member>
        <member name="T:Easy.Tall.UserCenter.WebApi.Middleware.ApiDocOptions">
            <summary>
            文档配置
            </summary>
        </member>
        <member name="P:Easy.Tall.UserCenter.WebApi.Middleware.ApiDocOptions.ApiDocEndPoint">
            <summary>
            文档服务POST地址
            </summary>
        </member>
        <member name="P:Easy.Tall.UserCenter.WebApi.Middleware.ApiDocOptions.ApiHost">
            <summary>
            文档接口地址
            </summary>
        </member>
        <member name="P:Easy.Tall.UserCenter.WebApi.Middleware.ApiDocOptions.ApiName">
            <summary>
            文档名称
            </summary>
        </member>
        <member name="P:Easy.Tall.UserCenter.WebApi.Middleware.ApiDocOptions.ApiDocUpdatePath">
            <summary>
            更新文档路由
            </summary>
        </member>
        <member name="P:Easy.Tall.UserCenter.WebApi.Middleware.ApiDocOptions.ApiJsonFilePath">
            <summary>
            apiJsonFile路径
            </summary>
        </member>
        <member name="P:Easy.Tall.UserCenter.WebApi.Middleware.ApiDocOptions.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Easy.Tall.UserCenter.WebApi.Middleware.ApiDocOptions.Version">
            <summary>
            版本
            </summary>
        </member>
        <member name="T:Easy.Tall.UserCenter.WebApi.Middleware.SwaggerBuilderExtension">
            <summary>
            Swagger中间件
            </summary>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Middleware.SwaggerBuilderExtension.UseSwaggerApiDoc(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Net.Http.IHttpClientFactory,System.Action{Easy.Tall.UserCenter.WebApi.Middleware.ApiDocOptions})">
            <summary>
            使用swagger生成文档并发送到文档中心
            </summary>
            <param name="builder">IApplicationBuilder</param>
            <param name="options">options 配置</param>
            <param name="httpClientFactory">httpClientFactory</param>
            <returns>IApplicationBuilder</returns>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Middleware.SwaggerBuilderExtension.GenerateApiDocFile(Easy.Tall.UserCenter.WebApi.Middleware.ApiDocOptions)">
            <summary>
            生成api文档
            </summary>
            <param name="option">option</param>
            <returns>string</returns>
        </member>
        <member name="T:Easy.Tall.UserCenter.WebApi.Program">
            <summary>
            程序入口
            启动命令 dotnet Holder.ERP.Picking.WebApi.dll --project=E:\code\picking\WebApi\Holder.ERP.Picking.WebApi --urls=http://localhost:5001/
            </summary>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Program.Main(System.String[])">
            <summary>
            程序Main方法
            </summary>
            <param name="args">args</param>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Program.CreateWebHostBuilder(System.String[])">
            <summary>
            创建WebHostBuilder
            </summary>
            <param name="args">参数</param>
            <returns>结果</returns>
        </member>
        <member name="T:Easy.Tall.UserCenter.WebApi.Startup">
            <summary>
            启动项
            </summary>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            启动项构造
            </summary>
            <param name="configuration">配置文件</param>
        </member>
        <member name="P:Easy.Tall.UserCenter.WebApi.Startup.Configuration">
            <summary>
            配置文件
            </summary>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services">For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940</param>
            <returns>DI容器</returns>
        </member>
        <member name="M:Easy.Tall.UserCenter.WebApi.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment,System.Net.Http.IHttpClientFactory)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app">app</param>
            <param name="env">env</param>
            <param name="httpClientFactory">http请求工厂</param>
        </member>
    </members>
</doc>
